basePath: /api
definitions:
  main.AddressGeo:
    description: AddressGeo represents the geocode result for an address.
    properties:
      suggestions:
        description: |-
          The list of suggestions for the geocode result
          @jsonField suggestions
          @example Example suggestions: [{"value": "123 Main St", "unrestricted_value": "123 Main St, City", "data": {"postal_code": "12345", "country": "USA"}}]
        items:
          properties:
            data:
              properties:
                country:
                  type: string
                postal_code:
                  type: string
              type: object
            unrestricted_value:
              type: string
            value:
              type: string
          type: object
        type: array
    type: object
  main.AddressSearch:
    description: AddressSearch represents the search result for an address.
    properties:
      metro:
        description: |-
          The list of metro stations nearby
          @jsonField metro
          @example Example metro stations: [{"distance": 1.5, "line": "A", "name": "Station 1"}]
        items:
          properties:
            distance:
              type: number
            line:
              type: string
            name:
              type: string
          type: object
        type: array
      result:
        description: |-
          The result address
          @jsonField result
          @example 123 Main St
        type: string
      source:
        description: |-
          The source of the address information
          @jsonField source
          @example Dadata
        type: string
    type: object
  main.GeocodeRequest:
    description: GeocodeRequest represents the request body for address geocoding.
    properties:
      lat:
        description: |-
          The latitude
          @jsonQuery query
          @example Example latitude: "40.7128"
        type: string
      lon:
        description: |-
          The longitude
          @jsonQuery query
          @example Example longitude: "-74.0060"
        type: string
    type: object
  main.GeocodeResponse:
    description: GeocodeResponse represents the response body for address geocoding.
    properties:
      addressesGeo:
        allOf:
        - $ref: '#/definitions/main.AddressGeo'
        description: |-
          The geocode result for the given coordinates
          @jsonField addressesGeo
          @example Example response:
          {"suggestions": [{"value": "123 Main St", "unrestricted_value": "123 Main St, City", "data": {"postal_code": "12345", "country": "USA"}}]}
    type: object
  main.SearchRequest:
    description: SearchRequest represents the request body for address search
    properties:
      query:
        description: |-
          The search query
          @jsonQuery query
          @example Example search query: "123 Main St"
        type: string
    type: object
  main.SearchResponse:
    description: SearchResponse represents the response body for address search.
    properties:
      addressesSearch:
        description: |-
          The list of addresses matching the search query
          @jsonField addressesSearch
          @example Example response:
          [{"source": "Dadata", "result": "123 Main St", "metro": []}]
        items:
          $ref: '#/definitions/main.AddressSearch'
        type: array
    type: object
  main.User:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample API for address searching and geocoding using Dadata
    API.
  termsOfService: http://localhost:8080/swagger/index.html
  title: My API
  version: "1.1"
paths:
  /address/geocode:
    post:
      consumes:
      - application/json
      operationId: geocodeAddress
      parameters:
      - description: Geocode Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.GeocodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.GeocodeResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Geocode an address
      tags:
      - geocode
  /address/search:
    post:
      consumes:
      - application/json
      operationId: searchAddress
      parameters:
      - description: Search Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.SearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.SearchResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search for an address
      tags:
      - search
  /login:
    post:
      consumes:
      - application/json
      operationId: loginUser
      parameters:
      - description: User
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
        "401":
          description: Invalid credentials
      summary: Log in a user
      tags:
      - SingIn
  /register:
    post:
      consumes:
      - application/json
      operationId: registerUser
      parameters:
      - description: User
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid request format
      summary: Register a new user
      tags:
      - SingUp
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
